proxy:
  https:
    enabled: true
    hosts:
    letsencrypt:
      contactEmail:
  service:
    loadBalancerIP:
hub:
  db:
    type: postgres
    url:
  extraEnv:
    APP_CREDENTIALS_URL:
      valueFrom:
        configMapKeyRef:
          name: notebooks-config
          key: APP_CREDENTIALS_URL
    CONTENT_SECURITY_POLICY:
      valueFrom:
        configMapKeyRef:
          name: notebooks-config
          key: CONTENT_SECURITY_POLICY
    PGPASSWORD:
      valueFrom:
        secretKeyRef:
          name: notebooks-secret
          key: PGPASSWORD
  extraConfig:
    00-jupyterlab-system-monitor: |
      c.Spawner.args = [
        "--ResourceUseDisplay.track_cpu_percent=True"
      ]
    10-authenticator: |
      c.JupyterHub.authenticator_class = AppAuthenticator
      c.Authenticator.refresh_pre_spawn = True
    20-tornado: |
      import os
      c.JupyterHub.tornado_settings = {
          "headers": {
              "Content-Security-Policy": os.environ["CONTENT_SECURITY_POLICY"],
          }
      }
  extraContainers:
    - name: cloudsql-proxy
      image: gcr.io/cloudsql-docker/gce-proxy:1.21.0
      command: [
          "/cloud_sql_proxy",
          "--dir=/cloud-sql",
          "-credential_file=/secrets/cloudsql/credentials.json"
      ]
      env:
        - name: INSTANCES
          valueFrom:
            secretKeyRef:
              name: csp-secret
              key: INSTANCES
      volumeMounts:
        - name: cloudsql-oauth-credentials
          mountPath: /secrets/cloudsql
          readOnly: true
        - name: ssl-certs
          mountPath: /etc/ssl/certs
        - name: cloudsql
          mountPath: /cloudsql
  extraVolumes:
    - name: cloudsql-oauth-credentials
      secret:
        secretName: csp-secret
        items:
          - key: credentials.json
            path: credentials.json
    - name: ssl-certs
      hostPath:
        path: /etc/ssl/certs
    - name: cloudsql
      emptyDir: { }
  extraFiles:
    jupyterhub_config:
      binaryData:
      mountPath: /usr/local/etc/jupyterhub/jupyterhub_config.d/jupyterhub_config.py
singleuser:
  image:
    name:
    tag:
  cpu:
    guarantee:
    limit:
  memory:
    guarantee:
    limit:
  defaultUrl: "/lab"
  extraEnv:
    CONTENT_SECURITY_POLICY:
      valueFrom:
        configMapKeyRef:
          name: notebooks-config
          key: CONTENT_SECURITY_POLICY
  lifecycleHooks:
    postStart:
      exec:
        command:
          - "sh"
          - "-c"
          - >
            cp -r /tmp/habari_sample_files/* /home/jovyan/;
            mkdir -p /home/jovyan/work;
scheduling:
  userScheduler:
    enabled: true
  podPriority:
    enabled: true
  userPlaceholder:
    enabled: true
    replicas: 4
  userPods:
    nodeAffinity:
      matchNodePurpose: require
cull:
  enabled: true
  timeout: 3600
  every: 300
